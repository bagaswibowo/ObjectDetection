name: Deploy to Azure VM

on:
  push:
    branches:
      - main  # Atau branch utama Anda jika bukan 'main'

jobs:
  deploy-to-vm:
    runs-on: ubuntu-latest
    environment: production # Opsional, jika Anda menggunakan environment di GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VM and Run Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          port: 22 # Port SSH default
          script: |
            # Tentukan direktori proyek di VM
            export PROJECT_DIR="/home/${{ secrets.VM_USERNAME }}/ObjectDetection"
            export VENV_DIR="$PROJECT_DIR/antenv"

            # Buat direktori proyek jika belum ada
            mkdir -p $PROJECT_DIR
            cd $PROJECT_DIR

            # Jika direktori .git tidak ada, clone repositori
            # Jika ada, lakukan pull untuk mendapatkan perubahan terbaru
            if [ ! -d ".git" ]; then
              git clone https://github.com/${{ github.repository }}.git .
            else
              git pull
            fi

            # Instal dependensi sistem yang dibutuhkan
            echo "Installing system dependencies..."
            sudo apt-get update -y
            sudo apt-get install -y python3-pip python3-venv libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender1

            # Buat atau update virtual environment Python
            if [ ! -d "$VENV_DIR" ]; then
              python3 -m venv $VENV_DIR
            fi
            echo "Activating virtual environment..." # Pesan ini tidak akan terlihat di log utama karena source dijalankan dalam subshell
            source $VENV_DIR/bin/activate

            echo "Installing/updating Python dependencies..."
            $VENV_DIR/bin/pip install --upgrade pip
            $VENV_DIR/bin/pip install -r requirements.txt

            echo "Python packages installed:"
            $VENV_DIR/bin/pip freeze

            # Hentikan proses Gunicorn yang mungkin sudah berjalan
            echo "Attempting to stop any existing Gunicorn process..."
            pkill gunicorn || true

            # Jalankan Gunicorn di background
            echo "Starting Gunicorn..."
            nohup $VENV_DIR/bin/gunicorn --bind 0.0.0.0:8000 wsgi:app --workers=2 --log-level=info --access-logfile $PROJECT_DIR/gunicorn_access.log --error-logfile $PROJECT_DIR/gunicorn_error.log &

            echo "Deployment to VM finished. Gunicorn started."
            echo "Application should be accessible at http://${{ secrets.VM_HOST }}:8000"
